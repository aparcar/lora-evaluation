{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Start This project evaluates LoRa as an alternative for existing sensor setups using other technologies like ZigBee or GSM. The current scope is to build a simple stack to gather sensor data end visualize is via an web interface. Current approach is to run LoRa instead of LoRaWAN to avoid third party dependencies for now, however this will be evaluated in the longer run. In the current stack Grafana is used for data visualization with data stored in a InfluxDB database. However Prometheus could be used as an alternative. Gateways based on RaspberryPis receive LoRa packages and forward them in the database. Sections Please follow the menu entries on the left to find more information on the topics. Software: Documentation on created software or setup examples. Hardware: Collection of hardware used within this project. It may help the development to have such information in a single place instead of distributed over the multiple Vendor websites. Datasheets: Similar to the hardware section collection of used documents for evaluation.","title":"Start"},{"location":"#start","text":"This project evaluates LoRa as an alternative for existing sensor setups using other technologies like ZigBee or GSM. The current scope is to build a simple stack to gather sensor data end visualize is via an web interface. Current approach is to run LoRa instead of LoRaWAN to avoid third party dependencies for now, however this will be evaluated in the longer run. In the current stack Grafana is used for data visualization with data stored in a InfluxDB database. However Prometheus could be used as an alternative. Gateways based on RaspberryPis receive LoRa packages and forward them in the database.","title":"Start"},{"location":"#sections","text":"Please follow the menu entries on the left to find more information on the topics. Software: Documentation on created software or setup examples. Hardware: Collection of hardware used within this project. It may help the development to have such information in a single place instead of distributed over the multiple Vendor websites. Datasheets: Similar to the hardware section collection of used documents for evaluation.","title":"Sections"},{"location":"datasheets/","text":"Datasheets LoRa SX127x - The RFM9X LoRa radio chip itself RFM9X - The radio module, which contains the SX1272 chipset","title":"Datasheets"},{"location":"datasheets/#datasheets","text":"","title":"Datasheets"},{"location":"datasheets/#lora","text":"SX127x - The RFM9X LoRa radio chip itself RFM9X - The radio module, which contains the SX1272 chipset","title":"LoRa"},{"location":"hardware/nodes/adafruit_feather_m0/","text":"Adafruit Feather M0 Source Parameter Platform (MCU) SAMD21G18A LoRa chip SX1276 Flash 256KB RAM 32KB Deep Sleep 300uA Price ~$35 Pinout Link Vendor Link PlatformIO Link","title":"Adafruit Feather M0"},{"location":"hardware/nodes/adafruit_feather_m0/#adafruit-feather-m0","text":"Source Parameter Platform (MCU) SAMD21G18A LoRa chip SX1276 Flash 256KB RAM 32KB Deep Sleep 300uA Price ~$35 Pinout Link Vendor Link PlatformIO Link","title":"Adafruit Feather M0"},{"location":"hardware/nodes/heltec_cubecell_dev/","text":"Heltec CubeCell Dev-Board The CubeCell Dev-Board is an integrated solution using a new platform called ASR with the newest generation LoRa chip called SX1262. Instead of the development board it is also possible to get a PCB compatible module . Source Parameter Platform (MCU) ASR6501 LoRa chip SX1262 (itegrated) Flash 128KB RAM 16KB Deep Sleep 3.5uA Price ~$12 Pinout Link Vendor Link","title":"Heltec CubeCell Dev-Board"},{"location":"hardware/nodes/heltec_cubecell_dev/#heltec-cubecell-dev-board","text":"The CubeCell Dev-Board is an integrated solution using a new platform called ASR with the newest generation LoRa chip called SX1262. Instead of the development board it is also possible to get a PCB compatible module . Source Parameter Platform (MCU) ASR6501 LoRa chip SX1262 (itegrated) Flash 128KB RAM 16KB Deep Sleep 3.5uA Price ~$12 Pinout Link Vendor Link","title":"Heltec CubeCell Dev-Board"},{"location":"hardware/nodes/heltec_wireless_stick_lite/","text":"Heltec Wireless Stick Lite The Heltec Wireless Stick Lite is a ESP32 based development board. The same hardware is also available as a module called Wireless Shell . Source Parameter Platform (MCU) ESP32 LoRa chip SX1276 Flash 4MB Deep Sleep 30uA Price ~$15 Pinout Link Website Link","title":"Heltec Wireless Stick Lite"},{"location":"hardware/nodes/heltec_wireless_stick_lite/#heltec-wireless-stick-lite","text":"The Heltec Wireless Stick Lite is a ESP32 based development board. The same hardware is also available as a module called Wireless Shell . Source Parameter Platform (MCU) ESP32 LoRa chip SX1276 Flash 4MB Deep Sleep 30uA Price ~$15 Pinout Link Website Link","title":"Heltec Wireless Stick Lite"},{"location":"hardware/nodes/sparkfun_pro_mini/","text":"Sparkfun Pro Mini The Pro Mini does not come with an attached LoRa antenna, however it is easily possible to hook up a SX1276 antenna. Source Parameter Platform (MCU) ATMEGA328P LoRa chip SX1276 (extern) Flash 30KB RAM 2KB Deep Sleep 30uA Price ~$3 Pinout Link Vendor Link PlatformIO Link","title":"Sparkfun Pro Mini"},{"location":"hardware/nodes/sparkfun_pro_mini/#sparkfun-pro-mini","text":"The Pro Mini does not come with an attached LoRa antenna, however it is easily possible to hook up a SX1276 antenna. Source Parameter Platform (MCU) ATMEGA328P LoRa chip SX1276 (extern) Flash 30KB RAM 2KB Deep Sleep 30uA Price ~$3 Pinout Link Vendor Link PlatformIO Link","title":"Sparkfun Pro Mini"},{"location":"software/combined_backend/","text":"Combined backend This document describes the setup of a LoRa receiver storing data in a InfluxDB and offering collected stats via Grafana. The services run on a RaspberryPi combined with a Adafruit Feather M0 with RFM95 antenna to receive the data. In later iterations the Feather M0 will be replaced by a SX127x antenna directly connected to the RasperryPi and database and web frontend should run on a virtual machine. RaspberryPi setup Install the latest version of Raspbian (currently 2020-02-13) on a MicroSD card and install the packages via the package manager apt sudo apt install -y \\ influxdb \\ # database python3-influxdb \\ # python bindings python3-serial \\ # access to serial console nohup # to keep the script running in background The Debian ports of Grafana are highly outdated and therefore the official Grafana repository is used instead: echo \"deb https://packages.grafana.com/oss/deb stable main\" | sudo tee -a /etc/apt/sources.list.d/grafana.list wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add - sudo apt-get update sudo apt-get install -y grafana-rpi More details on the upstream Grafana are available here . Receiver setup ( lora2json ) The LoRa receiver is based on the Arduino library called [arduino-LoRa][arduino-lora] which receives LoRa messages on a single channel and prints them to a serial console in JSON format. In this setup a Feather M0 is used, however other Arduino compatible boards with a LoRa connector can be used. The lora2json source code is in gateway/src/ . For simple deployment and managing of various LoRa boards [Visual Studio Code][vscode] in combination with [PlatformIO][platformio] is used. However it is also possible to use the [Arduino IDE][arduino-ide]. The following two libraries are required: #include <ArduinoJson.h> via [ArduinoJson][arduinojson] #include <LoRa.h> via [Arduino LoRa][arduino-lora] Once connected to a RaspberryPi or Linux running computer, a serial device is available, for the Feather M0 most likely called /dev/ttyACM0 . This may vary between boards. Below is an example line printed by the receiver when receiving a LoRa message from a node called heltec_wsl_1 , including temperature, humidity, a package counter, RSSI and SnR: { \"temp\" : 26.4 , \"hum\" : 67.6 , \"node\" : \"heltec_wsl_1\" , \"bat\" : 0 , \"cnt\" : 1233 , \"rssi\" : -58 , \"snr\" : 9.25 } arduino-lora [vscode][https://code.visualstudio.com/] [platformio][https://platformio.org/] [arduino-ide][https://www.arduino.cc/en/Main/Software] [arduinojson][https://arduinojson.org/] InfluxDB setup InfluxDB standard installation uses the username root in combination with the password root , this should be changed for a production setup, however is keep for this proof of concept. The database only runs on localhost and therefore is not accessible from outside. Grafana setup To setup Grafana open the web interface on the RaspberryPi IP address or default hostname raspberrypi . The web interface runs on port 3000 . The first login works with the credential combination admin/admin and should be changed as the interface is, unlike the database, available in the network. The InfluxDB is added as a datasource, running on http://localhost:8086 with login root/root . Instead of setting up the Dashboard manually it is possible to baste the included JSON file model.json into the Dashboard import dialog. Running json2influx Once all components are installed and setup the Python script json2influx.py that reads JSON messages from Serial and inserts them into the InfluxDB is started as following: nohup python3 lora2influx.py & It is no possible to close any used SSH connection and the script still continues to run.To see the (debug) logs run the following command: tail -f nohup.out The output should look similar to the following lines: 2020 -04-24 04 :39:33,197 [ DEBUG ] Starting new HTTP connection ( 1 ) : localhost:8086 2020 -04-24 04 :39:33,203 [ DEBUG ] http://localhost:8086 \"POST /query?q=CREATE+DATABASE+%22uhmdemo%22&db=uhmdemo HTTP/1.1\" 200 None 2020 -04-24 04 :39:35,393 [ DEBUG ] b '{\"temp\":26.5,\"hum\":67.5,\"node\":\"heltec_wsl_1\",\"bat\":0,\"cnt\":1218,\"rssi\":-59,\"snr\":9.75}\\r\\n' 2020 -04-24 04 :39:35,419 [ DEBUG ] http://localhost:8086 \"POST /write?db=uhmdemo HTTP/1.1\" 204 0 2020 -04-24 04 :39:37,898 [ DEBUG ] b '{\"temp\":26.3,\"hum\":73.8,\"node\":\"feather_1\",\"bat\":3.925195,\"cnt\":2406,\"rssi\":-63,\"snr\":9.25}\\r\\n' 2020 -04-24 04 :39:37,921 [ DEBUG ] http://localhost:8086 \"POST /write?db=uhmdemo HTTP/1.1\" 204 0 Result Below a picture of the setup running with three nodes for about 20 minutes. It show the measured temperature, humidity, battery voltage and RSSI value.","title":"Combined backend"},{"location":"software/combined_backend/#combined-backend","text":"This document describes the setup of a LoRa receiver storing data in a InfluxDB and offering collected stats via Grafana. The services run on a RaspberryPi combined with a Adafruit Feather M0 with RFM95 antenna to receive the data. In later iterations the Feather M0 will be replaced by a SX127x antenna directly connected to the RasperryPi and database and web frontend should run on a virtual machine.","title":"Combined backend"},{"location":"software/combined_backend/#raspberrypi-setup","text":"Install the latest version of Raspbian (currently 2020-02-13) on a MicroSD card and install the packages via the package manager apt sudo apt install -y \\ influxdb \\ # database python3-influxdb \\ # python bindings python3-serial \\ # access to serial console nohup # to keep the script running in background The Debian ports of Grafana are highly outdated and therefore the official Grafana repository is used instead: echo \"deb https://packages.grafana.com/oss/deb stable main\" | sudo tee -a /etc/apt/sources.list.d/grafana.list wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add - sudo apt-get update sudo apt-get install -y grafana-rpi More details on the upstream Grafana are available here .","title":"RaspberryPi setup"},{"location":"software/combined_backend/#receiver-setup-lora2json","text":"The LoRa receiver is based on the Arduino library called [arduino-LoRa][arduino-lora] which receives LoRa messages on a single channel and prints them to a serial console in JSON format. In this setup a Feather M0 is used, however other Arduino compatible boards with a LoRa connector can be used. The lora2json source code is in gateway/src/ . For simple deployment and managing of various LoRa boards [Visual Studio Code][vscode] in combination with [PlatformIO][platformio] is used. However it is also possible to use the [Arduino IDE][arduino-ide]. The following two libraries are required: #include <ArduinoJson.h> via [ArduinoJson][arduinojson] #include <LoRa.h> via [Arduino LoRa][arduino-lora] Once connected to a RaspberryPi or Linux running computer, a serial device is available, for the Feather M0 most likely called /dev/ttyACM0 . This may vary between boards. Below is an example line printed by the receiver when receiving a LoRa message from a node called heltec_wsl_1 , including temperature, humidity, a package counter, RSSI and SnR: { \"temp\" : 26.4 , \"hum\" : 67.6 , \"node\" : \"heltec_wsl_1\" , \"bat\" : 0 , \"cnt\" : 1233 , \"rssi\" : -58 , \"snr\" : 9.25 } arduino-lora [vscode][https://code.visualstudio.com/] [platformio][https://platformio.org/] [arduino-ide][https://www.arduino.cc/en/Main/Software] [arduinojson][https://arduinojson.org/]","title":"Receiver setup (lora2json)"},{"location":"software/combined_backend/#influxdb-setup","text":"InfluxDB standard installation uses the username root in combination with the password root , this should be changed for a production setup, however is keep for this proof of concept. The database only runs on localhost and therefore is not accessible from outside.","title":"InfluxDB setup"},{"location":"software/combined_backend/#grafana-setup","text":"To setup Grafana open the web interface on the RaspberryPi IP address or default hostname raspberrypi . The web interface runs on port 3000 . The first login works with the credential combination admin/admin and should be changed as the interface is, unlike the database, available in the network. The InfluxDB is added as a datasource, running on http://localhost:8086 with login root/root . Instead of setting up the Dashboard manually it is possible to baste the included JSON file model.json into the Dashboard import dialog.","title":"Grafana setup"},{"location":"software/combined_backend/#running-json2influx","text":"Once all components are installed and setup the Python script json2influx.py that reads JSON messages from Serial and inserts them into the InfluxDB is started as following: nohup python3 lora2influx.py & It is no possible to close any used SSH connection and the script still continues to run.To see the (debug) logs run the following command: tail -f nohup.out The output should look similar to the following lines: 2020 -04-24 04 :39:33,197 [ DEBUG ] Starting new HTTP connection ( 1 ) : localhost:8086 2020 -04-24 04 :39:33,203 [ DEBUG ] http://localhost:8086 \"POST /query?q=CREATE+DATABASE+%22uhmdemo%22&db=uhmdemo HTTP/1.1\" 200 None 2020 -04-24 04 :39:35,393 [ DEBUG ] b '{\"temp\":26.5,\"hum\":67.5,\"node\":\"heltec_wsl_1\",\"bat\":0,\"cnt\":1218,\"rssi\":-59,\"snr\":9.75}\\r\\n' 2020 -04-24 04 :39:35,419 [ DEBUG ] http://localhost:8086 \"POST /write?db=uhmdemo HTTP/1.1\" 204 0 2020 -04-24 04 :39:37,898 [ DEBUG ] b '{\"temp\":26.3,\"hum\":73.8,\"node\":\"feather_1\",\"bat\":3.925195,\"cnt\":2406,\"rssi\":-63,\"snr\":9.25}\\r\\n' 2020 -04-24 04 :39:37,921 [ DEBUG ] http://localhost:8086 \"POST /write?db=uhmdemo HTTP/1.1\" 204 0","title":"Running json2influx"},{"location":"software/combined_backend/#result","text":"Below a picture of the setup running with three nodes for about 20 minutes. It show the measured temperature, humidity, battery voltage and RSSI value.","title":"Result"}]}